name: bump
on:
  pull_request_target:
    types:
      - closed
    branches:
      - main
      - develop
      - uat

permissions:
  contents: read
env:
  USER_NAME: davikawasaki
  USER_EMAIL: davishinjik@gmail.com

jobs:
  bump:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
        with:
          fetch-depth: 0

      - name: Set up Commitizen
        run: |
          pip install --upgrade pip wheel
          pip install 'commitizen >=3.6.0'

      - name: Set up user
        run: |
          # Set up the GitHub user and email as author for the release commit.
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"
          git config --list --global

      - name: Create changelog and bump
        env:
          BASE: ${{ github.base_ref }}
        run: |
          npm i

          # Get affected projects using Nx
          echo "$BASE"

          COMMIT_HASH=$(git rev-parse @~)
          echo $COMMIT_HASH
          CHANGED_APPS=$(npx nx show projects --affected --base=origin/$BASE --head=$COMMIT_HASH | tr '\n' ',')

          echo "Changed projects: '$CHANGED_APPS'"

          CZ_FILES=""
          if [[ "$CHANGED_APPS" == *"a"* ]]; then CZ_FILES+="versions.json:a,"; fi
          if [[ "$CHANGED_APPS" == *"b"* ]]; then CZ_FILES+="versions.json:b,"; fi
          if [[ "$CHANGED_APPS" == *"c"* ]]; then CZ_FILES+="versions.json:c,"; fi

          # Remove trailing comma
          CZ_FILES="${CZ_FILES%,}"

          # Bump all projects if no specific change made
          if [[ -z "$CZ_FILES" ]]; then
            CZ_FILES="versions.json:a,versions.json:b,versions.json:c"
          fi

          # Set prerelease flag based on branch
          if [[ ${{ github.ref }} == "refs/heads/develop" ]]; then
            CZ_FLAGS="--prerelease alpha"
          elif [[ ${{ github.ref }} == "refs/heads/uat" ]]; then
            CZ_FLAGS="--prerelease rc"
          fi

          # shellcheck disable=SC2086
          # Commitizen bump
          cz version
          npx cz bump --changelog --yes ${CZ_FLAGS}

          # Loop through bumped projects and create individual tags
          for FILE in $(echo "$CZ_FILES" | tr ',' ' '); do
            PROJECT=$(echo "$FILE" | cut -d':' -f2)
            VERSION=$(jq -r ".$PROJECT" versions.json)

            # shellcheck disable=SC2001
            RELEASE_VERSION=$(echo "${VERSION}" | sed 's/\(a\|b\|rc\)[0-9]\+$//')
            # shellcheck disable=SC2001
            PRERELEASE=$(echo "${VERSION}" | sed 's/v\([0-9]\+\.\?\)\{3\}\(a\|rc\)[0-9]*/\2/g')

            cz changelog --file-name "RELEASE_NOTES.md" "${VERSION}"

            # For RC and Production releases merge release notes from alpha and rc releases respectively
            if [[ "${PRERELEASE}" != "a" ]]; then
              git tag -l "${RELEASE_VERSION}a*" | sort > TAGS
              VERSION_COUNT=$(wc -l < TAGS)
              if [[ $VERSION_COUNT -ge 1 ]]; then
                FIRST_REV=$(head -n1 TAGS)
                LAST_REV=$(tail -n1 TAGS)
                cz changelog --file-name PRERELEASE_NOTES.md --merge-tags "${FIRST_REV}".."${LAST_REV}"
                sed '/^## /d' PRERELEASE_NOTES.md >> RELEASE_NOTES.md
              fi
            fi

            # Create and push tag per project
            PROJECT_TAG="${PROJECT}-v${VERSION}"
            git tag -d "${PROJECT_TAG}"
            git tag "${PROJECT_TAG}"
          done

          cat CHANGELOG.md >> RELEASE_NOTES.md
          cat -s RELEASE_NOTES.md > CHANGELOG.md

          git add CHANGELOG.md
          git commit --amend --no-edit

          git log
          git tag

      # - name: Push the release
      #   run: |
      #     git push --no-verify
      #     git push --tags --no-verify
